# Generated by Django 3.2.8 on 2024-01-29 04:58

import discussion.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('directory', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0004_alter_taggeditem_content_type_alter_taggeditem_tag'),
        ('project', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(max_length=33)),
                ('file', models.FileField(blank=True, max_length=1000000, null=True, upload_to=discussion.models.bot_to)),
                ('message_handler', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, max_length=1000000, null=True, upload_to=discussion.models.category_to)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('needs_answer', models.BooleanField(default=False)),
                ('directory', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='discussiom_category_set', to='directory.directory')),
            ],
        ),
        migrations.CreateModel(
            name='Visitor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_agent', models.TextField(null=True)),
                ('ip_addr', models.GenericIPAddressField()),
            ],
        ),
        migrations.CreateModel(
            name='Discussion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, max_length=1000000, null=True, upload_to=discussion.models.discussion_to)),
                ('cover', models.ImageField(blank=True, max_length=1000000, null=True, upload_to=discussion.models.discussion_for)),
                ('discussion_code', models.CharField(max_length=8)),
                ('discussion_name', models.CharField(max_length=255)),
                ('day', models.CharField(blank=True, max_length=1000, null=True)),
                ('month', models.CharField(blank=True, max_length=1000, null=True)),
                ('year', models.CharField(blank=True, max_length=1000, null=True)),
                ('subscriber_count', models.IntegerField(blank=True, default=0, null=True)),
                ('like_count', models.IntegerField(blank=True, default=0, null=True)),
                ('discussion_type', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('share_count', models.IntegerField(blank=True, default=0, null=True)),
                ('is_request', models.BooleanField(default=False)),
                ('answered', models.BooleanField(default=False)),
                ('active_bots', models.ManyToManyField(to='discussion.Bot')),
                ('blocked_users', models.ManyToManyField(related_name='blocked_users_set', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='discussion_category', to='discussion.category')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('directory', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='directory.directory')),
                ('labels', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('liked_users', models.ManyToManyField(related_name='liked_users_set', to=settings.AUTH_USER_MODEL)),
                ('moderator_users', models.ManyToManyField(related_name='moderator_users_set', to=settings.AUTH_USER_MODEL)),
                ('projects', models.ManyToManyField(related_name='project_discussion_set', to='project.Project')),
                ('subscribed_users', models.ManyToManyField(related_name='subscribed_users_set', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, max_length=1000000, null=True, upload_to=discussion.models.file_to)),
                ('text', models.TextField()),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('day', models.CharField(blank=True, max_length=3, null=True)),
                ('month', models.CharField(blank=True, max_length=15, null=True)),
                ('year', models.CharField(blank=True, max_length=7, null=True)),
                ('time', models.CharField(blank=True, max_length=15, null=True)),
                ('first_chat', models.BooleanField(default=False)),
                ('discussion', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='discussion.discussion')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('liked_users', models.ManyToManyField(related_name='liked_chats_set', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
